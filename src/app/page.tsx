'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

const questions = [
  {
    q: '–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –º–∏—Ä–∞?',
    options: [
      '–ò–∑—É—á–∞—Ç—å —è–¥—Ä–æ –∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã',
      '–†–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª–µ—Ç–∫–∞–º–∏ –∏ –±–∏–æ—Å–µ–Ω—Å–æ—Ä–∞–º–∏',
      '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É',
      '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –ø–æ–º–æ—â—å—é –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏'
    ]
  },
  {
    q: '–¢–≤–æ—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∑–æ–Ω–∞ –º–µ—á—Ç—ã ‚Äî —ç—Ç–æ‚Ä¶',
    options: [
      '–ó–∞–ª —Å —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º —Ä–µ–∞–∫—Ç–æ—Ä–æ–º',
      '–ë–∏–æ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
      '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–∞–º–∏',
      '–ß–∏—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å –Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏'
    ]
  },
  {
    q: '–ö–∞–∫–æ–π –æ–±—ä–µ–∫—Ç —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –≤—Å–µ–≥–æ –∏–∑—É—á–∏—Ç—å?',
    options: [
      '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤',
      '–ú–µ—Ö–∞–Ω–∏–∑–º—ã —Å—Ç–∞—Ä–µ–Ω–∏—è –∂–∏–≤—ã—Ö —Å–∏—Å—Ç–µ–º',
      '–°–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–æ—á–∫–∏',
      '–ú–æ–ª–µ–∫—É–ª—ã, –≤–µ—â–µ—Å—Ç–≤–∞ –∏ –∏—Ö —Ä–µ–∞–∫—Ü–∏–∏'
    ]
  },
  {
    q: '–ß—Ç–æ –±—ã —Ç—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å–æ–±—Ä–∞–ª?',
    options: [
      '–ê–≤—Ç–æ–º–∞—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞',
      '–ê–ª–≥–æ—Ä–∏—Ç–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞',
      '–°–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π',
      '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞'
    ]
  },
  {
    q: '–¢—ã —Å–æ–∑–¥–∞—ë—à—å –Ω–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä. –ß—Ç–æ –≤ –Ω—ë–º –≥–ª–∞–≤–Ω–æ–µ?',
    options: [
      '–ú–∏–Ω–∏–∞—Ç—é—Ä–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å',
      '–•–∏–º–∏—á–µ—Å–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å',
      '–§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
      '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –æ—Ä–≥–∞–Ω–∏–∑–º–æ–º'
    ]
  },
  {
    q: '–¢–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –ß—Ç–æ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å?',
    options: [
      '–ò–∑—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è —Ä–µ–∞–∫—Ç–æ—Ä–∞',
      '–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
      '–†–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ö–∏–º—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏',
      '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ'
    ]
  },
  {
    q: '–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã —Ç–µ–±–µ –±–ª–∏–∂–µ?',
    options: [
      '–†–∞–±–æ—Ç–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ö–µ–º–∞–º–∏',
      '–°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö',
      '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Å–∏–Ω—Ç–µ–∑ –≤–µ—â–µ—Å—Ç–≤',
      '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–æ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π'
    ]
  },
  {
    q: '–¢—ã —Å—Ç—É–¥–µ–Ω—Ç. –ù–∞ –∫–∞–∫—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –º–µ—á—Ç–∞–µ—à—å –ø–æ–ø–∞—Å—Ç—å?',
    options: [
      '–ù–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
      '–ù–∞ –∑–∞–≤–æ–¥ –ø–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ —É—Ä–∞–Ω–∞',
      '–í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –Ω–µ–π—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
      '–í —Ü–µ–Ω—Ç—Ä —Ä–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
    ]
  },
  {
    q: '–ö–∞–∫–∞—è —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?',
    options: [
      '–ü–æ–Ω–∏–º–∞—Ç—å –Ω–∞–Ω–æ–º–∏—Ä',
      '–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏',
      '–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —è–≤–ª–µ–Ω–∏—è',
      '–ù–∞—Ö–æ–¥–∏—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö'
    ]
  },
  {
    q: '–ß—Ç–æ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ —Ç–≤–æ–µ–π –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏?',
    options: [
      '–í—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—á–∏—Ç–∞–Ω–æ',
      '–í—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ',
      '–í—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ',
      '–í—Å—ë –¥–æ–ª–∂–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º'
    ]
  }
];

const rules = [
  { keyword: '—Ä–µ–∞–∫—Ç–æ—Ä', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ä–µ–∞–∫—Ç–æ—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
  { keyword: '—É—Ä–∞–Ω', direction: '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏' },
  { keyword: '–¥–µ—Ñ–µ–∫—Ç—ã', direction: '–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è' },
  { keyword: '—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞', direction: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫' },
  { keyword: '–¥–∞–Ω–Ω—ã—Ö', direction: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–±–∏–æ', direction: '–ë–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '—Å—Ö–µ–º–∞–º–∏', direction: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –Ω–∞–Ω–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' },
  { keyword: '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', direction: '–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞' },
  { keyword: '—Ö–∏–º', direction: '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è' },
  { keyword: '–∫–∞—á–µ—Å—Ç–≤–æ', direction: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º' },
  { keyword: '–Ω–∞–Ω–æ', direction: '–ù–∞–Ω–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏—è' },
  { keyword: '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', direction: '–ò–Ω–Ω–æ–≤–∞—Ç–∏–∫–∞' },
  { keyword: '—Ä–∞–¥–∏–∞—Ü', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ñ–∏–∑–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' }
];

function predictDirection(answers: string[]): string {
  const text = answers.join(' ').toLowerCase();
  for (const rule of rules) {
    if (text.includes(rule.keyword)) {
      return rule.direction;
    }
  }
  return '–¢—ã –æ—Å–æ–±–µ–Ω–Ω—ã–π! –ü—Ä–∏–¥—É–º–∞–π —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üòä';
}

export default function QuizApp() {
  const [step, setStep] = useState(0);
  const [answers, setAnswers] = useState<string[]>([]);
  const [result, setResult] = useState<string | null>(null);

  const handleAnswer = (answer: string) => {
    const newAnswers = [...answers, answer];
    setAnswers(newAnswers);
    if (step + 1 === questions.length) {
      const prediction = predictDirection(newAnswers);
      setResult(prediction);
    } else {
      setStep(step + 1);
    }
  };

  const restart = () => {
    setStep(0);
    setAnswers([]);
    setResult(null);
  };

  return (
    <div className="min-h-screen bg-white px-4 py-10 flex items-center justify-center">
      <div className="max-w-2xl w-full">
        <AnimatePresence mode="wait">
          {!result ? (
            <motion.div
              key={step}
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -30 }}
              transition={{ duration: 0.4 }}
              className="bg-gray-100 p-8 rounded-2xl shadow text-center"
            >
              <div className="text-sm text-gray-500 mb-2">
                –í–æ–ø—Ä–æ—Å {step + 1} –∏–∑ {questions.length}
              </div>
              <h2 className="text-2xl md:text-3xl font-semibold mb-6">
                {questions[step].q}
              </h2>
              <div className="grid gap-4">
                {questions[step].options.map((opt, idx) => (
                  <motion.button
                    key={idx}
                    whileTap={{ scale: 0.95, opacity: 0 }}
                    onClick={() => handleAnswer(opt)}
                    className="bg-white border-2 border-gray-300 rounded-xl py-4 px-6 text-lg hover:bg-gray-200 transition"
                  >
                    {opt}
                  </motion.button>
                ))}
              </div>
            </motion.div>
          ) : (
            <motion.div
              key="result"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5 }}
              className="bg-yellow-100 p-8 rounded-2xl shadow text-center"
            >
              <h2 className="text-3xl font-bold mb-4">‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç:</h2>
              <p className="text-2xl mb-6">{result}</p>
              <button
                onClick={restart}
                className="bg-white border-2 border-gray-600 text-lg rounded-xl px-6 py-3 hover:bg-gray-200 transition"
              >
                –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑
              </button>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}