'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Cell,
} from 'recharts';

const questions = [
  { q: '–ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ?', options: ['–§–∏–∑–∏–∫–∞', '–•–∏–º–∏—è', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ë–∏–æ–ª–æ–≥–∏—è'] },
  { q: '–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏?', options: ['–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏, –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º', '–ß–µ—Ä–µ–∑ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã', '–° –ø–æ–º–æ—â—å—é –∫–æ–¥–∞', '–ß–µ—Ä–µ–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏'] },
  { q: '–ï—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª —Å—Ç–∏—Ö–∏–µ–π, —Ç—ã –±—ã –≤—ã–±—Ä–∞–ª...', options: ['–û–≥–æ–Ω—å ‚Äî –º–æ—â—å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–í–æ–∑–¥—É—Ö ‚Äî –ª—ë–≥–∫–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å', '–í–æ–¥–∞ ‚Äî –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∂–∏–∑–Ω—å', '–ó–µ–º–ª—è ‚Äî –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å'] },
  { q: '–ß—Ç–æ –≤ –º–∏—Ä–µ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?', options: ['–ü–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏—Ä–æ–¥—É –≤–µ—â–µ–π', '–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ', '–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π', '–ü–æ–º–æ–≥–∞—Ç—å –∂–∏–≤—ã–º —Å—É—â–µ—Å—Ç–≤–∞–º'] },
  { q: '–¢—ã –ø—Ä–∏—à—ë–ª –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é. –ß—Ç–æ –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç —Ç–≤–æ–π –≤–∑–≥–ª—è–¥?', options: ['–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–µ–∞–≥–µ–Ω—Ç–∞–º–∏', '–†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ —É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —Å –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–º–∞', '–ü–∞–Ω–µ–ª—å —Å —Å–∏–≥–Ω–∞–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏'] },
  { q: '–ì–¥–µ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?', options: ['–ù–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞', '–í –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ', '–í —Ü–µ–Ω—Ç—Ä–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π', '–í –º–µ–¥–∏–∫–æ-–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ'] },
  { q: '–ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ –∫–∞–∫ –±—É–¥—É—â–µ–º—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É?', options: ['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏', '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ö–µ–º', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏'] },
  { q: '–ö–∞–∫–∞—è —Ä–∞–±–æ—á–∞—è —Å—Ä–µ–¥–∞ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?', options: ['–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–ó–∞–≤–æ–¥ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–ù–∞—É—á–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç', 'IT-–∫–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ —Å—Ç–∞—Ä—Ç–∞–ø'] },
  { q: '–ß—Ç–æ —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?', options: ['–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '–°–∫–æ—Ä–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —á–µ–ª–æ–≤–µ–∫–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å'] },
  { q: '–ß—Ç–æ –±—ã —Ç—ã –≤—ã–±—Ä–∞–ª?', options: ['–†–µ–∞–∫—Ç–æ—Ä –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–π—Ç—Ä–æ–Ω–æ–≤', '–ú–∏–∫—Ä–æ—Å–∫–æ–ø –∏ –∂–∏–≤—ã–µ –∫–ª–µ—Ç–∫–∏', '–ß–∏—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∏ –Ω–∞–Ω–æ—Å–±–æ—Ä–∫–∞', '–ö–æ–¥ –∏ –¥–∞—Ç—á–∏–∫–∏'] },
];

const rules = [
  { keyword: '—Ñ–∏–∑–∏–∫–∞', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ñ–∏–∑–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '—Ä–∞–¥–∏–∞—Ü–∏', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ñ–∏–∑–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–Ω–µ–π—Ç—Ä–æ–Ω', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ñ–∏–∑–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–∑–∞—â–∏—Ç–Ω—ã–µ –æ–±–æ–ª–æ—á–∫–∏', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ñ–∏–∑–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '—Ä–µ–∞–∫—Ç–æ—Ä', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ä–µ–∞–∫—Ç–æ—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
  { keyword: '—Ç–æ–ø–ª–∏–≤–æ', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ä–µ–∞–∫—Ç–æ—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
  { keyword: '—Ä–µ–∞–∫—Ç–æ—Ä–Ω—ã–π –∑–∞–ª', direction: '–Ø–¥–µ—Ä–Ω—ã–µ —Ä–µ–∞–∫—Ç–æ—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
  { keyword: '—Ä–µ–∞–≥–µ–Ω—Ç', direction: '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è' },
  { keyword: '–≤–µ—â–µ—Å—Ç–≤–æ', direction: '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è' },
  { keyword: '—Å–∏–Ω—Ç–µ–∑', direction: '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è' },
  { keyword: '–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–∞–Ω–∞', direction: '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏' },
  { keyword: '—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏', direction: '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏' },
  { keyword: '—É—Ä–∞–Ω', direction: '–•–∏–º–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏' },
  { keyword: '–æ—Ä–≥–∞–Ω–∏–∑–º', direction: '–ë–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–∑–¥–æ—Ä–æ–≤—å–µ', direction: '–ë–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–±–∏–æ–º–µ–¥–∏—Ü–∏–Ω–∞', direction: '–ë–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–±–∏–æ—Å–µ–Ω—Å–æ—Ä', direction: '–ë–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–∂–∏–≤—ã–º —Å—É—â–µ—Å—Ç–≤–∞–º', direction: '–ë–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', direction: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –Ω–∞–Ω–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' },
  { keyword: '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', direction: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –Ω–∞–Ω–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' },
  { keyword: '—Å—Ö–µ–º–∞–º–∏', direction: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –Ω–∞–Ω–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' },
  { keyword: '—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞', direction: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫' },
  { keyword: '—Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã', direction: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫' },
  { keyword: '–∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞', direction: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫' },
  { keyword: '–∫–æ–Ω—Ç—Ä–æ–ª—å', direction: '–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è' },
  { keyword: '–¥–µ—Ñ–µ–∫—Ç—ã', direction: '–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è' },
  { keyword: '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', direction: '–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è' },
  { keyword: '–Ω–∞–Ω–æ', direction: '–ù–∞–Ω–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏—è' },
  { keyword: '–Ω–∞–Ω–æ–º–∏—Ä', direction: '–ù–∞–Ω–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏—è' },
  { keyword: '–º–∏–∫—Ä–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', direction: '–ù–∞–Ω–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏—è' },
  { keyword: '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', direction: '–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞' },
  { keyword: '–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏', direction: '–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞' },
  { keyword: '—Ñ–æ—Ä–º—É–ª–∞', direction: '–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞' },
  { keyword: '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', direction: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–¥–∞–Ω–Ω—ã—Ö', direction: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π', direction: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { keyword: '–∫–∞—á–µ—Å—Ç–≤–æ', direction: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º' },
  { keyword: '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ', direction: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º' },
  { keyword: '–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å', direction: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º' },
  { keyword: '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', direction: '–ò–Ω–Ω–æ–≤–∞—Ç–∏–∫–∞' },
  { keyword: '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', direction: '–ò–Ω–Ω–æ–≤–∞—Ç–∏–∫–∞' },
  { keyword: '—Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫', direction: '–ò–Ω–Ω–æ–≤–∞—Ç–∏–∫–∞' },
];

function getScores(answers: string[]) {
  const text = answers.join(' ').toLowerCase();
  const scoreMap: Record<string, number> = {};
  for (const rule of rules) {
    if (text.includes(rule.keyword.toLowerCase())) {
      scoreMap[rule.direction] = (scoreMap[rule.direction] || 0) + 1;
    }
  }
  return scoreMap;
}

function getTopDirections(scoreMap: Record<string, number>, topN = 3) {
  const entries = Object.entries(scoreMap);
  if (entries.length === 0) return [];
  return entries.sort((a, b) => b[1] - a[1]).slice(0, topN);
}

export default function QuizApp() {
  const [step, setStep] = useState(0);
  const [answers, setAnswers] = useState<string[]>([]);
  const [result, setResult] = useState<string | null>(null);
  const [chartData, setChartData] = useState<{ direction: string; value: number }[]>([]);

  const handleAnswer = (answer: string) => {
    const newAnswers = [...answers, answer];
    setAnswers(newAnswers);
    if (step + 1 === questions.length) {
      const scores = getScores(newAnswers);
      const top3 = getTopDirections(scores);
      setResult(top3[0]?.[0] || '–¢—ã –æ—Å–æ–±–µ–Ω–Ω—ã–π! –ü—Ä–∏–¥—É–º–∞–π —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üòä');
      setChartData(top3.map(([direction, value]) => ({ direction, value })));
    } else {
      setStep(step + 1);
    }
  };

  const restart = () => {
    setStep(0);
    setAnswers([]);
    setResult(null);
    setChartData([]);
  };

  return (
    <div className="min-h-screen bg-white px-4 py-10 flex items-center justify-center">
      <div className="max-w-2xl w-full">
        <AnimatePresence mode="wait">
          {!result ? (
            <motion.div
              key={step}
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -30 }}
              transition={{ duration: 0.4 }}
              className="bg-gray-100 p-8 rounded-2xl shadow text-center"
            >
              <div className="text-sm text-gray-500 mb-2">
                –í–æ–ø—Ä–æ—Å {step + 1} –∏–∑ {questions.length}
              </div>
              <h2 className="text-2xl md:text-3xl font-semibold mb-6">{questions[step].q}</h2>
              <div className="grid gap-4">
                {questions[step].options.map((opt, idx) => (
                  <motion.button
                    key={idx}
                    whileTap={{ scale: 0.95, opacity: 0 }}
                    onClick={() => handleAnswer(opt)}
                    className="bg-white border-2 border-gray-300 rounded-xl py-4 px-6 text-lg hover:bg-gray-200 transition"
                  >
                    {opt}
                  </motion.button>
                ))}
              </div>
            </motion.div>
          ) : (
            <motion.div
              key="result"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5 }}
              className="bg-yellow-100 p-8 rounded-2xl shadow text-center"
            >
              <h2 className="text-3xl font-bold mb-4">‚ú® –¢–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</h2>
              <p className="text-2xl mb-6">{result}</p>
              {chartData.length > 0 && (
                <div className="w-full h-[300px] mb-6">
                  <ResponsiveContainer>
                    <BarChart data={chartData} layout="vertical" margin={{ left: 20, right: 20 }}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis type="number" domain={[0, 3]} />
                      <YAxis type="category" dataKey="direction" tick={{ fontSize: 14 }} width={220} />
                      <Tooltip />
                      <Bar dataKey="value" fill="#6366f1" isAnimationActive radius={[0, 10, 10, 0]}>
                        {chartData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill="#6366f1" />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              )}
              <button
                onClick={restart}
                className="bg-white border-2 border-gray-600 text-lg rounded-xl px-6 py-3 hover:bg-gray-200 transition"
              >
                –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑
              </button>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}